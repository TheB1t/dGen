program             = _{ SOI ~ (stmt ~ ";")* ~ EOI }

stmt                = _{
    if_stmt
    | while_stmt
    | for_stmt
    | break_stmt
    | continue_stmt
    | return_stmt
    | func_decl
    | func_def
    | var_decl
    | assignment
    | expr
}

compound_stmt       =  { "{"  ~ (stmt ~ ";")*? ~ "}" }
expr_list           =  { expr ~ ("," ~ expr)* }
param_list          =  { param ~ ("," ~ param)* }
type_list           =  { type ~ ("," ~ type)* }

param               =  { type ~ identifier }
decl                = _{ type ~ identifier }
func_def            =  { decl ~ "(" ~ param_list? ~ ")" ~ compound_stmt }
func_decl           =  { decl ~ "(" ~ type_list? ~ ")" }
var_decl            =  { type ~ identifier ~ ("=" ~ expr)? }

if_stmt             =  { "if" ~ "(" ~ expr ~ ")" ~ compound_stmt ~ ("else" ~ compound_stmt)? }
while_stmt          =  { "while" ~ "(" ~ expr ~ ")" ~ compound_stmt }
for_stmt            =  { "for" ~ "(" ~ var_decl ~ ";" ~ expr ~ ";" ~ assignment ~ ")" ~ compound_stmt }

break_stmt          =  { "break" }
continue_stmt       =  { "continue" }
return_stmt         =  { "return" ~ expr? }

func_call           =  { identifier ~ "(" ~ expr_list? ~ ")" }
assignment          =  { identifier ~ "=" ~ expr }

identifier          = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

expr                =  { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix* )* }
infix               = _{ add | sub | mul | div | mmod | and | or | eq | neq | gte | lte | gt | lt }
prefix              = _{ inc | dec | neg | not }
postfix             = _{ inc | dec }
add                 =  { "+" }
sub                 =  { "-" }
mul                 =  { "*" }
div                 =  { "/" }
mmod                =  { "%" }
and                 =  { "&&" }
or                  =  { "||" }
not                 =  { "!" }
eq                  =  { "==" }
neq                 =  { "!=" }
gt                  =  { ">" }
lt                  =  { "<" }
gte                 =  { ">=" }
lte                 =  { "<=" }
neg                 =  { "-" }
inc                 =  { "++" }
dec                 =  { "--" }
primary             = _{
    func_call
    | number
    | boolean
    | identifier
    | string
    | "(" ~ expr ~ ")"
}

number              = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }
string              =  { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

btrue               =  { "true" }
bfalse              =  { "false" }
boolean             = _{ btrue | bfalse }

tnum                =  { "number" }
tstr                =  { "string" }
tbool               =  { "boolean" }
tvoid               =  { "void" }
tobj                =  { "object" }
type                = _{ tnum | tstr | tbool | tvoid | tobj | identifier }

WHITESPACE          = _{ " " | "\t" | "\r" | NEWLINE }
COMMENT             = _{ "//" ~ (!NEWLINE ~ ANY)* }
